---
description: 
globs: 
alwaysApply: false
---
# TDD(테스트 주도 개발) 룰

## 테스트 우선 원칙
- 새로운 기능을 개발하기 전에 테스트를 먼저 작성한다
- 모든 public 메서드는 테스트 케이스가 있어야 한다
- 테스트를 통과할 만큼만 최소한의 코드를 작성한다

## 테스트 패턴
- 테스트 파일은 대상 클래스 이름 뒤에 "Test"를 붙인다 (예: TicketService.kt의 테스트는 TicketServiceTest.kt)
- 테스트 메서드 이름은 테스트 의도를 명확히 표현한다 (예: should_reserve_ticket_when_available)
- 각 테스트는 독립적으로 실행 가능해야 한다 (테스트 간 의존성 없음)

## 리팩토링 원칙
- 테스트를 통과한 후에는 중복 제거와 코드 개선을 위한 리팩토링을 수행한다
- 리팩토링은 동작을 변경하지 않고 코드 구조만 개선해야 한다
- 리팩토링 후에도 모든 테스트가 통과해야 한다

## 코드 커버리지
- 모든 비즈니스 로직은 최소 80% 이상의 테스트 커버리지를 유지한다
- 경계 조건과 예외 상황에 대한 테스트를 포함한다

## 테스트 레벨
- 단위 테스트: 클래스 또는 메서드 단위의 기능 테스트
- 통합 테스트: 여러 컴포넌트 간의 상호작용 테스트
- 기능 테스트: 사용자 시나리오 기반 테스트

## 모킹 원칙
- 외부 의존성(데이터베이스, API 등)은 모킹하여 테스트한다
- 모킹은 필요한 경우에만 사용하고, 가능한 실제 객체를 사용한다

## 테스트 우선순위
1. 코어 비즈니스 로직 (도메인 모델, 서비스)
2. 리포지토리 및 데이터 접근 계층
3. 컨트롤러 및 API 엔드포인트
4. 유틸리티 및 헬퍼 클래스

## 코딩 전 체크리스트
- [ ] 테스트 케이스 작성 완료
- [ ] 실패하는 테스트 확인 (Red)
- [ ] 최소한의 코드로 테스트 통과 (Green)
- [ ] 코드 리팩토링 (Refactor)
- [ ] 모든 테스트 통과 확인
